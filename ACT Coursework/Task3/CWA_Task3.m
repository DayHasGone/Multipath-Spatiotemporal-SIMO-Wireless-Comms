%% Task3
x=26; % alphabetical orders of names
y=19;

%Generate two m-sequence
coeffs1=[1,0,0,1,1];
coeffs2=[1,1,0,0,1];
seq_length=2^(length(coeffs1)-1)-1;
mseq1=fMSeqGen(coeffs1);
mseq2=fMSeqGen(coeffs2);

%% Generate gold-sequence  sequence of 0s and 1s
init_d=1+mod(x+y,12); %initialize d (shift bits of mseq2)
d=0; %delay for gold balance
for i=init_d:seq_length-1  %Find "balanced" gold-sequence
    goldseq1=fGoldSeq(mseq1,mseq2,i);

    if(sum(goldseq1)==(length(goldseq1)+1)/2)
        d=i;
        break;
    end 
end

while(sum(fGoldSeq(mseq1,mseq2,d+1))==(length(goldseq1)+1)/2)
    d=d+1;
end
goldseq1=fGoldSeq(mseq1,mseq2,d);
goldseq2=fGoldSeq(mseq1,mseq2,d+1);
goldseq3=fGoldSeq(mseq1,mseq2,d+2);

%%  Generate Image Bit Streams And Display Original Image
BitMax=160*112*3*8; %Max bits of data stream
[BitStream1,xPixels1,yPixels1]=fImageSource("Images/Image1.jpg",BitMax);
[BitStream2,xPixels2,yPixels2]=fImageSource("Images/Image2.jpg",BitMax);
[BitStream3,xPixels3,yPixels3]=fImageSource("Images/Image3.jpg",BitMax);

%Output orignal image1
fImageSink(BitStream1,xPixels1,yPixels1,"Original Desired Image");

%% QPSK Demodulator
phi=x+2*y; %in degree
Symbols1=fDSQPSKModulator(BitStream1,goldseq1,phi); %Symbols generated by DS-QPSK
Symbols2=fDSQPSKModulator(BitStream2,goldseq2,phi);
Symbols3=fDSQPSKModulator(BitStream3,goldseq3,phi);

%% Initialization of channel factors
Delay_vec=[5;7;12]; %Delay Vector
Beta_vec=[0.4;0.7;0.2]; %Fading coeff Vector
DOA_matrix=[30,0;90,0;150,0];
NumofArray=5;
Array=zeros(NumofArray,3);
Phaseof1stAnt=30/180*pi; %Change phase for 1st antenna from degree into radian
ChangeInRadian=360/NumofArray/180*pi; %The radian interval between each antenna
for i=1:NumofArray
    Array(i,:)=1*[cos(Phaseof1stAnt+(i-1)*ChangeInRadian) sin(Phaseof1stAnt+(i-1)*ChangeInRadian) 0];
end

%% Transmission And Estimation
%Transmite Image with environment SNR=0dB
symbolsOut_0dB=fChannel([1;1;1],[Symbols1,Symbols2,Symbols3],Delay_vec,Beta_vec,DOA_matrix,0,Array);
%Estimate DOA and delay for Image with SNR=0dB; and output our desired received symbols for SNR=0dB
[DOA_estimate_0dB,delay_estimate_0dB,desired_symbols_0dB] = fChannelEstimation_task3(symbolsOut_0dB, goldseq1,Array,Beta_vec(1)); 

%Transmite Image with environment SNR=40dB
symbolsOut_40dB=fChannel([1;1;1],[Symbols1,Symbols2,Symbols3],Delay_vec,Beta_vec,DOA_matrix,40,Array);
%Estimate DOA and delay for Image with SNR=0dB; and output our desired received symbols for SNR=40dB
[DOA_estimate_40dB,delay_estimate_40dB,desired_symbols_40dB] = fChannelEstimation_task3(symbolsOut_40dB, goldseq1,Array,Beta_vec(1)); 



%% QPSK Demodulator and Image Display
%DSQPSK Demodulation and recover (0dB)
bitsOut_0dB = fDSQPSKDemodulator_task3(desired_symbols_0dB,phi);
fImageSink(bitsOut_0dB,xPixels1,yPixels1,"Received Desired Signal with SNR=0dB-Task3"); %Output received image

%DSQPSK Demodulation and recover (40dB)
bitsOut_40dB = fDSQPSKDemodulator_task3(desired_symbols_40dB,phi);
fImageSink(bitsOut_40dB,xPixels1,yPixels1,"Received Desired Signal with SNR=40dB-Task3"); %Output received image

%% BER Display
BER_0dB=ErrorRate(BitStream1,bitsOut_0dB);
fprintf('The BER for SNR= 0dB is %10f\n',BER_0dB)

BER_40dB=ErrorRate(BitStream1,bitsOut_40dB);
fprintf('The BER for SNR= 40dB is %10f\n',BER_40dB)